#!/usr/bin/ruby1.8
#
# NAME
#  symbiosis-create-mass-hosting-sites -- Auto-configure Apache2 mass-hosted sites for Symbiosis
#
# SYNOPSIS
#  symbiosis-create-mass-hosting-sites [ --ssl-template | -s <file>]
#                               [ --non-ssl-template | -t <file> ]
#                               [ --apache2-dir | -a <directory> ]
#                               [ --force | -f ] [ --no-reload | -r ]
#                               [ --help | -h ] [ --manual | -m ] [ --verbose | -v ]
#
# OPTIONS
#  --ssl-template, -s <file>      Specify the template file for SSL sites.
#                                 Defaults to
#                                 /etc/symbiosis/apache.d/zz-mass-hosting.ssl.template.erb
#
#  --non-ssl-template, -t <file>  Specify the template file for non-SSL sites.
#                                 Defaults to
#                                 /etc/symbiosis/apache.d/zz-mass-hosting.template.erb
#
#  --apache2-dir, -a <directory>  Specify the location of the apache2
#                                 configuration directory. Defaults to
#                                 /etc/apache2.
#
#  --force, -f       Force the re-creation of all sites.
#
#  --no-reload, -r  Do not reload apache2 even if changes have taken place.
#
#  --help, -h        Show the help information for this script.
#
#  --manual, -m      Show the manual for this script.
#
#  --verbose, -v     Show debugging information.
#
# USAGE
#
# This script generates two snippets of Apache configuration for use on the
# primary IP addresses of a machine.  Having done so it reloads apache2.
#
# This script can be disabled by creating the file
# /etc/symbiosis/apache.d/disabled, or
# /etc/symbiosis/apache.d/disabled.zz-mass-hosting. This will also prevent any
# further package updates from recreating the zz-mass-hosting sites in the
# apache2 configuration. However it will not disable any sites that are
# currently in place. These should be removed manually.
#
# AUTHOR
#
#   Patrick J Cherry <patrick@bytemark.co.uk>
#


require 'getoptlong'
require 'symbiosis/utils.rb'

#
#  Entry point to the code
#
$FORCE    = false
$VERBOSE  = false
$help     = false
$manual   = false

#
#  Do we need to reload apache?
#
$RELOAD=false

#
# The root directory -- '/' by default.
#
root = "/"
non_ssl_template = nil
ssl_template     = nil
apache2_dir      = nil
no_reload       = false

opts = GetoptLong.new(
         [ '--help',             '-h', GetoptLong::NO_ARGUMENT ],
         [ '--manual',           '-m', GetoptLong::NO_ARGUMENT ],
         [ '--verbose',          '-v', GetoptLong::NO_ARGUMENT ],
         [ '--force',            '-f', GetoptLong::NO_ARGUMENT ],
         [ '--no-reload',        '-n', GetoptLong::NO_ARGUMENT],
         [ '--no-restart',       '-N', GetoptLong::NO_ARGUMENT],
         [ '--ssl-template',     '-s', GetoptLong::REQUIRED_ARGUMENT ],
         [ '--non-ssl-template', '-t', GetoptLong::REQUIRED_ARGUMENT ],
         [ '--apache2-dir',      '-a', GetoptLong::REQUIRED_ARGUMENT ],
         [ '--root-dir',         '-r', GetoptLong::REQUIRED_ARGUMENT ]
       )

opts.each do |opt, arg|
  case opt
  when '--help'
    $help = true
  when '--manual'
    $manual = true
  when '--verbose'
    $VERBOSE = true
  when '--template'
    ssl_template = arg
  when '--ssl-template'
    ssl_template = arg
  when '--non-ssl-template'
    non_ssl_template = arg
  when '--apache2-dir'
    apache2_dir = arg
  when '--root'
    root = arg
  when '--no-reload'
    no_reload = true
  # Legacy option.
  when '--no-restart'
    no_reload = true
  when '--force'
    $FORCE = true
  end
end



#
# Show the manual, or the help
#
Symbiosis::Utils.show_help( __FILE__ ) if  $help
Symbiosis::Utils.show_usage( __FILE__ ) if  $manual

#
#  If either happened we can exit.
#
if ( $help or $manual )
  exit 0
end
puts "OK"

def verbose(s) ; puts s if $VERBOSE ; end

#
# Disable creation of mass hosting sites.
#
if File.exists?("/etc/symbiosis/apache.d/disabled") or File.exists?("/etc/symbiosis/apache.d/disabled.zz-mass-hosting")
  verbose "Symbiosis mass hosting disabled.  Exiting."
  exit 0
end

#
# Requirements after the help clause has finished.
#
require 'erb'
require 'symbiosis/domains'
require 'symbiosis/domain/ssl'
require 'symbiosis/config_files/apache'

#
# Set the default paths.
#
non_ssl_template = File.join(root, "/etc/symbiosis/apache.d/zz-mass-hosting.template.erb") if non_ssl_template.nil?
ssl_template     = File.join(root, "/etc/symbiosis/apache.d/zz-mass-hosting.ssl.template.erb") if ssl_template.nil?
apache2_dir      = File.join(root, "/etc/apache2") if apache2_dir.nil?

#
# For each template.
#
[non_ssl_template, ssl_template].each do |tmpl|

  begin
    tmpl_basename        = File.basename(tmpl, ".template.erb")
    sites_available_file = File.join(apache2_dir, "sites-available","#{tmpl_basename}")
    sites_enabled_file   = File.join(apache2_dir, "sites-enabled","#{tmpl_basename}")

    verbose "Mass hosting: #{tmpl_basename} "

    config          = Symbiosis::ConfigFiles::Apache.new(sites_available_file, "#")
    config.template = tmpl

    #
    #  If there is already a site enabled we only
    # need to touch it if one of the SSL-files is more
    # recent than the generated file.
    #
    #  e.g. User adds /config/ssl.combined and a site
    # is generated but broken because a mandatory bundle is missing.
    #

    if ( $FORCE )
      verbose "\tForcing re-creation of configuration due to --force."

    elsif config.exists?

      if config.changed?
        verbose "\tNot updating configuration, as it has been edited by hand."
        next

      elsif config.outdated?
        verbose "\tRe-creating configuration as it is out of date."

      else
        verbose "\tConfiguration is up-to date."
        next

      end

    else
      verbose "\tConfiguring site for the first time"

    end

    #
    # This gets apache2 to check the configuration using a temporary file.
    #
    if config.ok?

      verbose "\tWriting configuration"
      config.write

      # Definitely reload if we've rewritten the config.
      $RELOAD = true

      unless config.enabled?(sites_enabled_file)
        verbose "\tEnabling site"
        config.enable(sites_enabled_file, $FORCE)
      end

    else
      verbose "\tApache has rejected the new configuration -- no changes have been made."
    end

    #
    # Rescue errors for this domain, but continue for others.
    #
  rescue StandardError => err
    warn "\tUnable to configure site for #{tmpl} because #{err.to_s}"
    verbose "\t"+err.backtrace.join("\n\t")
  end
end

#
#  All done.
#
if ( $RELOAD and not no_reload )
  verbose "Restarting Apache"
  system( "/etc/init.d/apache2 reload" )
end

