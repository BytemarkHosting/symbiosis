#!/usr/bin/perl -w
#
#  Generate statistics for each hosted domain, from the global
# /var/log/apache2/access.log file.
#
#  This is a little convulted but essentially we use "split-logfile" to
# turn the logfile into multiple ones - one for each vhost which has
# been accessed.
#
#  Then we process each one, and keep a little bit of history.
#
# Steve
# --
#
#



use strict;
use warnings;

use File::Basename qw/ basename /;
use File::Copy qw/ copy     /;
use File::Path qw/ mkpath   /;
use Getopt::Long;



#
#  Configuration variables
#
my %CONFIG;
$CONFIG{ 'verbose' } = 0;
$CONFIG{ 'prefix' }  = "/srv";



#
#  Parse command line
#
parseCommandLineArguments();


#
#  Get all domains
#
my @domains = getDomains();


#
#  Process each one.
#
foreach my $domain (@domains)
{
    $CONFIG{ 'verbose' } && print "$domain - starting\n";

    processDomain($domain);

    fixPermissions($domain);

    $CONFIG{ 'verbose' } && print "$domain - completed\n";
}


#
#  All done
#
exit;



=begin doc

  Process the logs for a single domain

=end doc

=cut 

sub processDomain
{
    my ($domain) = (@_);

    #
    #  Make sure there is content
    #
    if ( !-d "$CONFIG{'prefix'}/$domain/public/htdocs" )
    {
        $CONFIG{ 'verbose' } && print "The domain has no htdocs\n";
        return;
    }

    #
    #  Ensure we have a logfile
    #
    if ( !-e "/var/log/apache2/access.log" )
    {
        $CONFIG{ 'verbose' } && print "Apache access log empty\n";
        return;
    }


    #
    # Make the stats + log directories if not present
    #
    foreach my $dir (qw! /htdocs/stats /logs !)
    {
        if ( !-d "$CONFIG{'prefix'}/$domain/public/$dir" )
        {
            $CONFIG{ 'verbose' } &&
              print "Creating $CONFIG{'prefix'}/$domain/public/$dir\n";

            mkpath( ["$CONFIG{'prefix'}/$domain/public/$dir"], 0 );
        }
    }


    #
    #  Copy
    #
    system(
        "cd $CONFIG{'prefix'}/$domain/public/htdocs/stats/  && split-logfile < /var/log/apache2/access.log"
    );

    #
    #  The logfiles we'll use
    #
    my @logfiles = ();

    #
    #  If there is a logfile resolve it and use it.
    #
    if ( -e "$CONFIG{'prefix'}/$domain/public/htdocs/stats/$domain.log" )
    {
        my $file = "$CONFIG{'prefix'}/$domain/public/htdocs/stats/$domain.log";
        system("logresolve < $file > $file.resolved");
        push( @logfiles, $file . ".resolved" );
    }

    #
    #  If there is a "www." logfile resolve it and use it.
    #
    if ( -e "$CONFIG{'prefix'}/$domain/public/htdocs/stats/www.$domain.log" )
    {
        my $file =
          "$CONFIG{'prefix'}/$domain/public/htdocs/stats/www.$domain.log";
        system("logresolve < $file > $file.resolved");
        push( @logfiles, $file . ".resolved" );
    }

    #
    #  Create the stub webalizer configuration file and use it
    #
    open( TMP, ">",
          "$CONFIG{'prefix'}/$domain/public/htdocs/stats/webalizer.conf" ) or
      die
      "Failed to create $CONFIG{'prefix'}/$domain/public/htdocs/stats/webalizer.conf - $!";

    #
    #  Add in the resolved logfiles.
    #
    foreach my $file (@logfiles)
    {
        print TMP "LogFile $file\n";
    }

    print TMP <<EOF;
OutputDir       .
Incremental     yes
ReportTitle     Usage Statistics for
HostName        $domain
HideSite        *$domain
HideReferrer    $domain/
HideReferrer    Direct Request
HideURL         *.gif
HideURL         *.GIF
HideURL         *.jpg
HideURL         *.JPG
HideURL         *.ra
GroupURL        /cgi-bin/*
MangleAgents    4
EOF
    close(TMP);


    #
    #  Run webalizer: if we got any logs
    #
    system("cd $CONFIG{'prefix'}/$domain/public/htdocs/stats/ && webalizer -q")
      if ( scalar(@logfiles) > 0 );

    #
    #  Join the logfiles so the user can download them.
    #
    foreach my $file (@logfiles)
    {
        my $date = getDay();
        system(
            "cd $CONFIG{'prefix'}/$domain/public/logs/  && cat $file >> access.log.$date"
        );
    }

    #
    #  Cleanup working files.
    #
    foreach my $file (
               sort( glob("$CONFIG{'prefix'}/$domain/public/htdocs/stats/*") ) )
    {
        next if ( -d $file );

        if ( ( $file =~ /\.log$/i ) ||
             ( $file =~ /\.resolved$/i ) ||
             ( $file =~ /webalizer\.conf$/i ) )
        {
            $CONFIG{ 'verbose' } && print "Removing: $file\n";
            unlink($file);
        }
    }


    #
    #  Now remove old files
    #
    my $count = 0;
    foreach my $file (
        reverse(
            sort( glob( "$CONFIG{'prefix'}/$domain/public/logs/access.log.*" ) )
        ) )
    {
        if ( $count > 10 )
        {
            $CONFIG{ 'verbose' } && print "Removing: $file\n";
            unlink($file);
        }
        $count += 1;
    }

}


=begin doc

  Get all the domains on this system

=end doc

=cut

sub getDomains
{
    my @found;

    foreach my $dir ( sort( glob("$CONFIG{'prefix'}/*") ) )
    {
        if ( -d $dir )
        {
            $dir = basename($dir);
            push( @found, $dir );
        }
    }

    return (@found);
}



=begin doc

  Get the year-month-day string to use for our single logs

=end doc

=cut

sub getDay
{
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
      localtime(time);

    $mon  += 1;
    $year += 1900;

    my $date = sprintf( "%d-%02d-%02d", $year, $mon, $mday );

    return ($date);
}


=begin doc

  Minimal command line parser.

=end doc

=cut

sub parseCommandLineArguments
{
    if (
         !GetOptions( "verbose",  \$CONFIG{ 'verbose' },
                      "prefix=s", \$CONFIG{ 'prefix' }, ) )
    {
        exit;
    }

}


=begin doc

  Fix the ownership of the named domain's generated stats.

=end doc

=cut

sub fixPermissions
{
    my ($domain) = (@_);

    return unless ( -d "/srv/$domain/public/htdocs" );

    #
    #  We want the owner + group of the directory
    #
    my ( $dev,  $ino,   $mode,  $nlink, $uid,     $gid, $rdev,
         $size, $atime, $mtime, $ctime, $blksize, $blocks
       ) = stat("/srv/$domain/public/htdocs");

    $CONFIG{ 'verbose' } && print " Domain $domain owned by ($uid.$gid)\n";

    #
    #  The directories we're going to fixup
    #
    my @dirs =
      ( "/srv/$domain/public/htdocs/stats", "/srv/$domain/public/logs" );

    foreach my $dir (@dirs)
    {
        if ( -d $dir )
        {

            #
            #  Change the directory
            #
            system("chown $uid.$gid $dir");

            foreach my $file ( sort( glob("$dir/*") ) )
            {

                #
                #  And the files inside it.
                #
                if ( -e $file )
                {
                    system("chown $uid.$gid $file");
                }
            }
        }
    }
}
