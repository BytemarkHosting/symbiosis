#!/usr/bin/ruby1.8
#
# NAME
#
#  symbiosis-create-sites -- Auto-configure Apache2 sites with specified IPs
#
# SYNOPSIS
#  symbiosis-create-sites [ --ssl-template | -s <file> ]
#                         [ --non-ssl-template | -t <file> ]
#                         [ --apache2-dir | -a <directory> ]
#                         [ --force | -f ] [ --no-reload | -r ]
#                         [ --help | -h ] [ --manual | -m ] [ --verbose | -v ]
#
# OPTIONS
#
# --ssl-template, -s <file>      Specify the template file for SSL sites.
#                                Defaults to
#                                /etc/symbiosis/apache.d/non_ssl.template.erb
#
# --non-ssl-template, -t <file>  Specify the template file for non-SSL sites.
#                                Defaults to
#                                /etc/symbiosis/apache.d/non_ssl.template.erb
#
# --apache2-dir, -a <directory>  Specify the location of the apache2
#                                configuration directory. Defaults to
#                                /etc/apache2.
#
# --force, -f       Force the re-creation of all sites.
#
# --no-reload, -r   Do not reload apache2 even if changes have taken place.
#
# --manual, -m      Show the manual for this script.
#
# --help, -h        Show brief usage instructions for this script.
#
# --verbose, -v     Show debugging information.
#
# USAGE
#
# This script is designed to iterate over the domains hosted upon a Symbiosis
# system, and configure Apache to listen appropriate when a domain is
# configured for SSL hosting and not yet configured.
#
# This script can be disabled by creating the file
# /etc/symbiosis/apache.d/disabled. This will also prevent any further package
# updates from recreating these sites in the apache2 configuration. However it
# will not disable any sites that are currently in place. These should be
# removed manually.
#
# AUTHOR
#
#   Steve Kemp <steve@bytemark.co.uk>
#


require 'getoptlong'
require 'symbiosis/utils.rb'


#
#  Entry point to the code
#
$FORCE    = false
$VERBOSE  = false
$help     = false
$manual   = false

#
#  Do we need to reload apache?
#
$RELOAD=false

#
# The root directory -- '/' by default.
#
root = "/"
non_ssl_template = nil
ssl_template     = nil
apache2_dir      = nil
no_reload       = false

opts = GetoptLong.new(
         [ '--help',             '-h', GetoptLong::NO_ARGUMENT ],
         [ '--manual',           '-m', GetoptLong::NO_ARGUMENT ],
         [ '--verbose',          '-v', GetoptLong::NO_ARGUMENT ],
         [ '--force',            '-f', GetoptLong::NO_ARGUMENT ],
         [ '--no-reload',        '-n', GetoptLong::NO_ARGUMENT],
         [ '--no-restart',       '-N', GetoptLong::NO_ARGUMENT],
         [ '--ssl-template',     '-s', GetoptLong::REQUIRED_ARGUMENT ],
         [ '--non-ssl-template', '-t', GetoptLong::REQUIRED_ARGUMENT ],
         [ '--apache2-dir',      '-a', GetoptLong::REQUIRED_ARGUMENT ],
         [ '--root-dir',         '-r', GetoptLong::REQUIRED_ARGUMENT ]
       )

opts.each do |opt, arg|
  case opt
  when '--ssl-template'
    ssl_template = arg
  when '--non-ssl-template'
    non_ssl_template = arg
  when '--apache2-dir'
    apache2_dir = arg
  when '--root'
    root = arg
  when '--no-reload'
    no_reload = true
  # This is a legacy option.
  when '--no-restart'
    no_reload = true
  when '--help'
    $help = true
  when '--manual'
    $manual = true
  when '--verbose'
    $VERBOSE = true
  when '--force'
    $FORCE = true
  end
end


#
# Show the manual, or the help
#
Symbiosis::Utils.show_usage( __FILE__ ) if  $help
Symbiosis::Utils.show_manual( __FILE__ ) if  $manual


#
#  If either happened we can exit.
#
if ( $help or $manual )
  exit 0
end

def verbose(s)
  puts s if $VERBOSE
end

#
# Disable creation of mass hosting sites.
#
if File.exists?("/etc/symbiosis/apache.d/disabled")
  verbose "Symbiosis automatic apache configuration disabled. Exiting."
  exit 0
end

zz_mass_hosting_disabled = File.exists?("/etc/symbiosis/apache.d/disabled.zz-mass-hosting")
verbose "Symbiosis automatic mass-hosting configuration disabled.  Configuring all sites." if zz_mass_hosting_disabled

#
# Requirements after the help clause has finished.
#
require 'erb'
require 'symbiosis/domains'
require 'symbiosis/domain/ssl'
require 'symbiosis/config_files/apache'

#
# Set the default paths.
#
non_ssl_template = File.join(root, "/etc/symbiosis/apache.d/non_ssl.template.erb") if non_ssl_template.nil?
ssl_template     = File.join(root, "/etc/symbiosis/apache.d/ssl.template.erb") if ssl_template.nil?
apache2_dir      = File.join(root, "/etc/apache2") if apache2_dir.nil?

#
# Any arguments on the command line specify which domains to do.
#
domains_to_configure = ARGV

primary_ips = [Symbiosis::Host.primary_ipv4, Symbiosis::Host.primary_ipv6]

#
#  For each domain.
#
Symbiosis::Domains.each do |domain|

  verbose "Domain: #{domain.name} "

  next unless domains_to_configure.empty? or domains_to_configure.include?(domain.name)

  if domain.is_alias?
    verbose "\t#{domain.symlink} is a link to #{domain.directory}.  Skipping."
    next
  end

  begin
    sites_available_file = File.join(apache2_dir, "sites-available","#{domain.name}.conf")
    sites_enabled_file   = File.join(apache2_dir, "sites-enabled","#{domain.name}.conf")

    config        = Symbiosis::ConfigFiles::Apache.new(sites_available_file, "#")
    config.domain = domain

    if !zz_mass_hosting_disabled and domain.ips.any?{|ip| primary_ips.include?(ip)}
      verbose "\tThis site is using the host's primary IPs -- it is covered by the mass-hosting config.  Skipping."
      next
    end

    document_root = File.join(domain.directory,"public","htdocs")
    unless File.directory?(document_root)
      verbose "\tThe document root #{document_root} does not exist.  Skipping"
      next
    end

    #
    #  If SSL is not enabled then we can skip
    #
    if ( domain.ssl_enabled? )
      begin
        domain.ssl_verify
        config.template = ssl_template

        verbose "\tSSL is enabled -- using SSL template"

      rescue OpenSSL::OpenSSLError => err
        #
        # This catches any OpenSSL problem, and allows us to revert to non-ssl hosting.
        #

        warn "SSL configuration for #{domain.name} is broken -- #{err.to_s} (#{err.class.to_s})"

        if domain.ssl_mandatory?
          #
          # If this domain is SSL-only, do not reconfigure it with the non-SSL
          # template.
          #
          verbose "\tSSL is enabled and mandatory, but mis-configured.  Skipping."
          next
        end

        verbose "\tSSL is enabled but mis-configured -- using non-SSL template."
        config.template = non_ssl_template
      end
    else
      config.template = non_ssl_template

      verbose "\tSSL is not enabled -- using non-SSL template"
    end

    #
    #  If there is already a site enabled we only
    # need to touch it if one of the SSL-files is more
    # recent than the generated file.
    #
    #  e.g. User adds /config/ssl.combined and a site
    # is generated but broken because a mandatory bundle is missing.
    #


    if ( $FORCE )
      verbose "\tForcing re-creation of configuration due to --force."

    elsif config.exists?

      if config.changed?
        verbose "\tNot updating configuration, as it has been edited by hand."
        next

      elsif config.outdated?
        verbose "\tRe-creating configuration as it is out of date."

      else
        verbose "\tConfiguration is up-to date."
        next

      end

    else
      verbose "\tConfiguring site for the first time"

      end

    #
    # This gets apache2 to check the configuration using a temporary file.
    #
    if config.ok?

      verbose "\tWriting configuration"
      config.write

      # Definitely reload if we've rewritten the config.
      $RELOAD = true

      unless config.enabled?(sites_enabled_file)
        verbose "\tEnabling site"
        config.enable(sites_enabled_file, $FORCE)
      end

    else
      verbose "\tApache has rejected the new configuration -- no changes have been made."
    end

  rescue StandardError => err
    #
    # Rescue errors for this domain, but continue for others.
    #
    warn "\tUnable to configure site for #{domain.name} because #{err.to_s} (#{err.class.to_s})"
    verbose "\t"+err.backtrace.join("\n\t")
  end
end

#
#  All done.
#
if ( $RELOAD and !no_reload )
  verbose "Reloading Apache"

  system( "/etc/init.d/apache2 reload" )
end
